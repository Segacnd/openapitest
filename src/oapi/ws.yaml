openapi: 3.0.3
info:
  title: Whitesnake Recruitment Admin
  version: 1.0.0
  description: API for Whitesnake Recruitment Admin for vacancies
paths:
  /api/v1/authentication/token/:
    post:
      operationId: v1_authentication_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - v1
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/v1/authentication/token/refresh/:
    post:
      operationId: v1_authentication_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - v1
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/v1/department/:
    get:
      operationId: v1_department_list
      parameters:
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - v1
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDepartmentList'
          description: ''
    post:
      operationId: v1_department_create
      tags:
      - v1
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Department'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Department'
          application/json:
            schema:
              $ref: '#/components/schemas/Department'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: ''
  /api/v1/department/{id}/:
    get:
      operationId: v1_department_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this department.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: ''
    put:
      operationId: v1_department_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this department.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Department'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Department'
          application/json:
            schema:
              $ref: '#/components/schemas/Department'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: ''
    patch:
      operationId: v1_department_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this department.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedDepartment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedDepartment'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedDepartment'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: ''
    delete:
      operationId: v1_department_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this department.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/vacancy/:
    get:
      operationId: v1_vacancy_list
      parameters:
      - in: query
        name: department
        schema:
          type: string
          format: uuid
      - name: p
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      tags:
      - v1
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedVacancyList'
          description: ''
    post:
      operationId: v1_vacancy_create
      tags:
      - v1
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vacancy'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vacancy'
          application/json:
            schema:
              $ref: '#/components/schemas/Vacancy'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vacancy'
          description: ''
  /api/v1/vacancy/{id}/:
    get:
      operationId: v1_vacancy_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this vacancy.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vacancy'
          description: ''
    put:
      operationId: v1_vacancy_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this vacancy.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vacancy'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vacancy'
          application/json:
            schema:
              $ref: '#/components/schemas/Vacancy'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vacancy'
          description: ''
    patch:
      operationId: v1_vacancy_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this vacancy.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedVacancy'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedVacancy'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedVacancy'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vacancy'
          description: ''
    delete:
      operationId: v1_vacancy_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this vacancy.
        required: true
      tags:
      - v1
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/vacancy/{id}/restore/:
    post:
      operationId: v1_vacancy_restore_create
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this vacancy.
        required: true
      tags:
      - v1
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Vacancy'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Vacancy'
          application/json:
            schema:
              $ref: '#/components/schemas/Vacancy'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vacancy'
          description: ''
components:
  schemas:
    Department:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 64
        seo_title:
          type: string
          nullable: true
          maxLength: 100
        seo_description:
          type: string
          nullable: true
          maxLength: 100
        description:
          type: object
          additionalProperties: {}
          nullable: true
      required:
      - id
      - name
      - seo_description
      - seo_title
    PaginatedDepartmentList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Department'
    PaginatedVacancyList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?p=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Vacancy'
    PatchedDepartment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 64
        seo_title:
          type: string
          nullable: true
          maxLength: 100
        seo_description:
          type: string
          nullable: true
          maxLength: 100
        description:
          type: object
          additionalProperties: {}
          nullable: true
    PatchedVacancy:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 100
        seo_title:
          type: string
          nullable: true
          maxLength: 100
        seo_description:
          type: string
          nullable: true
          maxLength: 100
        description:
          type: string
        bonuses:
          type: array
          items:
            type: string
            maxLength: 200
        pluses:
          type: array
          items:
            type: string
            maxLength: 200
        skills:
          type: array
          items:
            type: string
            maxLength: 200
        link:
          type: string
          format: uri
          maxLength: 200
        department:
          allOf:
          - $ref: '#/components/schemas/Department'
          readOnly: true
        department_id:
          type: string
          format: uuid
          writeOnly: true
        addition:
          type: string
          nullable: true
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    Vacancy:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 100
        seo_title:
          type: string
          nullable: true
          maxLength: 100
        seo_description:
          type: string
          nullable: true
          maxLength: 100
        description:
          type: string
        bonuses:
          type: array
          items:
            type: string
            maxLength: 200
        pluses:
          type: array
          items:
            type: string
            maxLength: 200
        skills:
          type: array
          items:
            type: string
            maxLength: 200
        link:
          type: string
          format: uri
          maxLength: 200
        department:
          allOf:
          - $ref: '#/components/schemas/Department'
          readOnly: true
        department_id:
          type: string
          format: uuid
          writeOnly: true
        addition:
          type: string
          nullable: true
      required:
      - department
      - department_id
      - description
      - id
      - seo_description
      - seo_title
      - title
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
